package cn.bingoogolapple.tuning;

/**
 * 作者:王浩 邮件:bingoogolapple@gmail.com
 * 创建时间:2017/7/28 上午9:24
 * 描述:
 * 日志中显示堆中新生代的内存空间为 18432K ( 约 18M )，eden 的内存空间为 16384K ( 约 16M)，from / to survivor 的内存空间为 2048K ( 约 2M)
 * 新生代总空间 = eden + from + to = 16 + 2 + 2 = 20M
 * <p>
 * 日志中显示新生代的总空间只有 18M，因为 JVM 每次只是用新生代中的 eden 和一个 survivor，因此新生代实际的可用内存空间大小为所指定的 90%
 * 新生代的内存空间指的是新生代可用的总的内存空间，而不是指整个新生代的空间大小
 * <p>
 * 当 Full GC 进行的时候，默认的方式是尽量清空新生代，因此在调 System.gc() 时，新生代中存活的对象会提前进入老年代
 */
public class ManualGCDemo {
    public void doTest() {
        System.out.println("============================================================================================================================================================================");
        // 单位, 兆(M)
        Integer M = new Integer(1024 * 1024);
        // 申请 1M 大小的内存空间
        byte[] bytes = new byte[1 * M];
        // 断开引用链
        bytes = null;
        // 手动触发 GC
        System.gc();
        System.out.println("============================================================================================================================================================================");
        // 重新申请 1M 大小的内存空间
        bytes = new byte[1 * M];
        // 再次申请 1M 大小的内存空间
        bytes = new byte[1 * M];
        // 手动触发 GC
        System.gc();
        System.out.println("============================================================================================================================================================================");
    }

    public static void main(String[] args) throws InterruptedException {
        new ManualGCDemo().doTest();
    }
}
/*
============================================================================================================================================================================
2017-07-28T12:48:53.510-0800: 0.110: [GC (System.gc())
    [PSYoungGen: 2007K->400K(18432K)]
    2007K->408K(59392K),
    0.0009867 secs]
    [Times: user=0.00 sys=0.00, real=0.00 secs]
2017-07-28T12:48:53.511-0800: 0.111: [Full GC (System.gc())
    [PSYoungGen: 400K->0K(18432K)]
    [ParOldGen: 8K->318K(40960K)]
    408K->318K(59392K),
    [Metaspace: 2940K->2940K(1056768K)],
    0.0047307 secs]
    [Times: user=0.01 sys=0.00, real=0.00 secs]
============================================================================================================================================================================
2017-07-28T12:48:53.517-0800: 0.117: [GC (System.gc())
    [PSYoungGen: 2375K->1024K(18432K)]
    2694K->1342K(59392K),
    0.0012798 secs]
    [Times: user=0.00 sys=0.00, real=0.00 secs]
2017-07-28T12:48:53.518-0800: 0.118: [Full GC (System.gc())
    [PSYoungGen: 1024K->0K(18432K)]
    [ParOldGen: 318K->1334K(40960K)]
    1342K->1334K(59392K),
    [Metaspace: 2940K->2940K(1056768K)],
    0.0045915 secs]
    [Times: user=0.01 sys=0.01, real=0.01 secs]
============================================================================================================================================================================
Heap
 PSYoungGen      total 18432K, used 328K [0x00000007bec00000, 0x00000007c0000000, 0x00000007c0000000)
  eden space 16384K, 2% used [0x00000007bec00000,0x00000007bec52090,0x00000007bfc00000)
  from space 2048K, 0% used [0x00000007bfe00000,0x00000007bfe00000,0x00000007c0000000)
  to   space 2048K, 0% used [0x00000007bfc00000,0x00000007bfc00000,0x00000007bfe00000)
 ParOldGen       total 40960K, used 1334K [0x00000007bc400000, 0x00000007bec00000, 0x00000007bec00000)
  object space 40960K, 3% used [0x00000007bc400000,0x00000007bc54d810,0x00000007bec00000)
 Metaspace       used 2947K, capacity 4486K, committed 4864K, reserved 1056768K
  class space    used 323K, capacity 386K, committed 512K, reserved 1048576K
 */